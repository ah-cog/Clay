=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "FLASH1"    (component FLASH_LDD)
   - FLASH1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" property is set to "yes" 
                (<Enabled in init. code>) value then the device is also enabled(see the description of the Enable() method). In 
                this case the Enable() method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init() the Deinit() must be called first.
   - FLASH1_Read -This method sets up a flash memory read operation. The operation itself is performing by defined batches 
                (property <Read batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service).
   - FLASH1_Write -This method sets up a flash memory write operation. The operation itself is performing by defined batches 
                (property <Write batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_Erase -This method sets up a flash memory erase operation. The operation itself is performing by defined batches 
                (property <Erase batch size>) by periodical calling the component’s Main method in the user application (higher 
                level OS service) or by the component’s ISR, if an component’s interrupt service is enabled.
   - FLASH1_EraseBlock -This method sets up a flash memory block erase operation. The block erase operation is performed to the 
                flash memory's block specified by the Address parameter.
   - FLASH1_Main -This method is used to perform one batch of a flash memory operation. This method is used to perform batches 
                of all flash memory operations (Write, Read, Erase, EraseBlock, VerifyErasedBlock) when the component works in 
                the polled mode (interrupt service is disabled - property <Interrupt service>). This method performs batches of 
                the read flash memory operation, when the component works in the interrupt triggered mode (interrupt service is 
                enabled). This method is enabled only if the component works in the polled mode or if the Read method is 
                enabled.

Module "tick_1ms_timer" (component TimerInt_LDD)
   - tick_1ms_timer_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is 
                set to "yes" value then the device is also enabled (see the description of the <Enable> method). In this case 
                the <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before 
                the second call of Init the <Deinit> must be called first.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "LED1"      (component BitIO_LDD)
   - LED1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - LED1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LED1_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - LED1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "LED2"      (component BitIO_LDD)
   - LED2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - LED2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LED2_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - LED2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MK20DX256LL7)

===================================================================================
